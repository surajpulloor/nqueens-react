{"version":3,"sources":["components/ChessBoard.js","utility/Nqueens.js","components/App.js","reportWebVitals.js","index.js"],"names":["ChessBoard","props","className","solutions","index","n","isNum","length","parseInt","map","solutionIndex","Array","fill","value","index2","icon","faChessQueen","Nqueens","this","board","constructBoard","i","row","col","j","collidingVertically","collidingDiagonally","solution","push","isSafe","solve","extractSolution","App","state","nqueens","setState","initShortcutOnBody","e","keyCode","ref","current","focus","initShortcutOnInput","stopPropagation","next","prev","prevState","setN","target","replace","nValid","validateN","validationMsg","s","test","React","createRef","document","body","addEventListener","removeEventListener","onSubmit","preventDefault","type","placeholder","onChange","onKeyDown","autoFocus","style","display","disabled","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e84ffb4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport '../styles/ChessBoard.css';\r\n\r\nfunction ChessBoard(props) {\r\n\r\n    return (\r\n\r\n        <div className=\"solutions\">\r\n\r\n            {\r\n                props.solutions && \r\n                props.index !== -1 && \r\n                props.n !== '' && \r\n                props.isNum &&\r\n                props.solutions[props.index].length === parseInt(props.n)\r\n\r\n                ?\r\n\r\n                <table className=\"chess-board\">\r\n                    <tbody>\r\n\r\n\r\n                        { \r\n                            props.solutions[props.index].map((solutionIndex, index) => (\r\n                                <tr key={\"tr\" + index}>\r\n                                    {\r\n                                        new Array(parseInt(props.n)).fill(true).map((value, index2) => (\r\n                                            <td key={\"td\" + index2}>\r\n                                                {\r\n                                                    solutionIndex === index2 ? <FontAwesomeIcon icon={faChessQueen} /> : ' '\r\n                                                }\r\n                                            </td>\r\n                                        ))\r\n                                    }\r\n                                </tr>\r\n\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n                :\r\n                <div className=\"chess-board-structure\">\r\n                    {\r\n                        props.n !== '' &&\r\n                        props.isNum\r\n\r\n                        ?\r\n                        \r\n                        <table className=\"chess-board\">\r\n\r\n                            <tbody>\r\n\r\n                                {\r\n                                    new Array(parseInt(props.n)).fill(false).map((value, index) => (\r\n                                        <tr key={\"tr-structure\" + index}>\r\n                                        {\r\n            \r\n                                            new Array(parseInt(props.n)).fill(false).map((value, index) => (\r\n                                                <td key={\"td-structure\" + index}>&nbsp;</td>\r\n                                            ))\r\n            \r\n                                        }\r\n                                    \r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n\r\n\r\n                            </tbody>\r\n                        \r\n                            \r\n                        </table>\r\n\r\n                        :\r\n\r\n                        <div className=\"message\">\r\n                            <h1>The nxn chessboard will be displayed here. Give your 'N' and click on 'Solve'</h1>\r\n                        </div>\r\n\r\n                    }\r\n                </div>\r\n            }\r\n\r\n\r\n        </div>\r\n\r\n        \r\n    );\r\n\r\n}\r\n\r\nexport default ChessBoard;","class Nqueens {\r\n    constructor(n) {\r\n\r\n        this.n = n;\r\n        this.solutions = [];\r\n        this.board = new Array(n);\r\n        this.constructBoard();\r\n    }\r\n\r\n\r\n    constructBoard() {\r\n        for (let i = 0; i < this.board.length; i++) {\r\n            this.board[i] = new Array(this.n).fill(false);\r\n        }\r\n    }\r\n\r\n    collidingVertically(row, col) {\r\n\r\n        while (--row >= 0) {\r\n            if (this.board[row][col]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    collidingDiagonally(row, col) {\r\n\r\n        let i = row - 1;\r\n        let j = col - 1;\r\n\r\n        // check collision for left diagonal\r\n        while (i >= 0 && j >= 0) {\r\n            if (this.board[i][j]) {\r\n                return true;\r\n            }\r\n\r\n            i--;\r\n            j--;\r\n        }\r\n\r\n        i = row - 1;\r\n        j = col + 1;\r\n        // check collsion for right diagonal\r\n        while (i >= 0 && j < this.board.length) {\r\n            if (this.board[i][j]) {\r\n                return true;\r\n            }\r\n\r\n            i--;\r\n            j++;\r\n        }\r\n\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    isSafe(row, col) {\r\n\r\n        return !(this.collidingVertically(row, col) || this.collidingDiagonally(row, col));\r\n\r\n    }\r\n\r\n    extractSolution() {\r\n        const solution = [];\r\n\r\n        for (let i = 0; i < this.n; i++) {\r\n            for (let j = 0; j < this.n; j++) {\r\n                if (this.board[i][j]) {\r\n                    solution.push(j);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return solution;\r\n    }\r\n\r\n    solve(row) {\r\n\r\n        if (row === this.n) {\r\n\r\n            const solution = this.extractSolution();\r\n\r\n            this.solutions.push(solution);\r\n            return;\r\n        }\r\n\r\n        for (let col = 0; col < this.n; col++) {\r\n            if (this.isSafe(row, col)) {\r\n                this.board[row][col] = true;\r\n                this.solve(row + 1);\r\n                this.board[row][col] = false;\r\n            }\r\n        }\r\n\r\n\r\n        return this.solutions;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default Nqueens","import '../styles/App.css';\nimport ChessBoard from './ChessBoard';\nimport React, { Component } from 'react';\nimport Nqueens from \"../utility/Nqueens\";\n\nclass App extends Component {\n  constructor(props) {\n\n    super(props);\n    this.state = {\n      n: '',\n      index: -1,\n      solutions: null,\n      isNum: false,\n      validationMsg: ''\n    };\n\n    this.ref = React.createRef();\n\n  }\n\n\n  componentDidMount() {\n    document.body.addEventListener('keydown', this.initShortcutOnBody);\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener('keydown', this.initShortcutOnBody);\n  }\n\n  solve = () => {\n\n    const n = parseInt(this.state.n);\n\n    const nqueens = new Nqueens(n);\n\n    this.setState({\n      solutions: nqueens.solve(0),\n      index: 0\n    });\n\n  }\n\n\n  initShortcutOnBody = (e) => {\n    if (e.keyCode === 70) {\n      this.ref.current.focus();\n    } else {\n      this.initShortcutOnInput(e);\n    }\n  }\n\n\n  initShortcutOnInput = (e) => {\n    \n    e.stopPropagation();\n\n    if (e.keyCode === 13 && this.state.n !== '' && this.state.isNum) {\n      this.solve();\n    } else if (e.keyCode === 107 && this.state.solutions && this.state.index + 1 < this.state.solutions.length) {\n      this.next();\n    } else if (e.keyCode === 109 && this.state.solutions && this.state.index - 1 >= 0) {\n      this.prev();\n    }\n  }\n\n\n  prev = () => {\n\n    this.setState((prevState) => ({\n      index: prevState.index - 1\n    }));\n\n  }\n\n  next = () => {\n    this.setState((prevState) => ({\n      index: prevState.index + 1\n    }));\n  }\n\n\n  setN = (e) => {\n    let n = e.target.value;\n\n    // replace +,- with empty string because we are using it for scrolling through our solutions\n    n = n.replace(/[\\+\\-f]+/ig, '');\n\n    const nValid = this.validateN(n);\n\n    this.setState({\n      n: n,\n      isNum: nValid.isNum,\n      validationMsg: nValid.validationMsg\n    });\n  }\n\n  validateN = (s) => {\n\n    let isNum = true;\n    let validationMsg = '';\n\n    if (/^\\-[\\d]+$/gi.test(s)) {\n      isNum = false;\n      validationMsg = \"Negative number's are not allowed\";\n    } else if (/^\\-[\\d]+\\.[\\d]+$/gi.test(s)) {\n      isNum = false;\n      validationMsg = \"Negative decimal number's are not allowed\";\n    } else if (/^\\.[\\d]+$/gi.test(s) || /^[\\d]+\\.[\\d]+$/gi.test(s)) {\n      isNum = false;\n      validationMsg = \"Decimal number's are not allowed\";\n    } else if (/[^0-9]+/gi.test(s)) {\n      isNum = false;\n      validationMsg = \"Only number's are allowed\";\n    } else if (parseInt(s) < 4) {\n      isNum = false;\n      validationMsg = \"You can only calculate solution's for more than 3 queens\";\n    } else if (parseInt(s) > 13) {\n      isNum = false;\n      validationMsg = \"You cannot calculate solution's for more than 13 queens\";\n    }\n\n    return {\n      isNum: isNum,\n      validationMsg: validationMsg\n    };\n  }\n\n  render() {\n\n    return (\n      <div className=\"container\">\n\n        <div className=\"row\">\n          <div className=\"col-md-6 chess-board\">\n\n            {\n              this.state.n !== '' && \n              this.state.solutions && \n              this.state.solutions[0].length === parseInt(this.state.n) && \n              this.state.isNum  ?\n              <div className=\"header\">\n                <h1>No. of solutions for {this.state.n} queens is {this.state.solutions.length}</h1>\n                <h2 className=\"solution-count\">Solution #{this.state.index + 1}</h2>\n              </div>\n              :\n              ''\n            }\n            \n            <ChessBoard solutions={this.state.solutions} index={this.state.index} n={this.state.n} isNum={this.state.isNum} />\n          </div>\n\n          <div className=\"col-md-6 controls\">\n            <form onSubmit={(e) => e.preventDefault()}>\n              <div className=\"input-group has-validation\">\n                  <input \n                    type=\"text\" \n                    placeholder=\"N\" \n                    className=\"form-control\" \n                    value={this.state.n} \n                    onChange={this.setN} \n                    onKeyDown={this.initShortcutOnInput} \n                    ref={this.ref}\n                    autoFocus\n                  />\n                  <div className=\"invalid-feedback\" style={{display: !this.state.isNum ? 'block' : 'none'}}>\n                    {this.state.validationMsg}\n                  </div>\n              </div>\n                \n              <input \n                type=\"button\" \n                value=\"Solve\" \n                className=\"btn btn-primary\" \n                disabled={\n                  this.state.n === '' ||\n                  (this.state.n !== '' && !this.state.isNum)\n                } \n                onClick={this.solve} \n              />\n              \n              <input\n                type=\"button\"\n                value=\"Prev\"\n                className=\"btn btn-primary\"\n                disabled={\n                  this.state.n === '' ||\n                  (this.state.n !== '' && !this.state.isNum) ||\n                  (this.state.solutions && this.state.solutions[0].length !== parseInt(this.state.n)) ||\n                  this.state.index - 1 < 0\n                }\n                onClick={this.prev}\n              />\n              \n              <input\n                type=\"button\"\n                value=\"Next\"\n                className=\"btn btn-primary\"\n                disabled={\n                  this.state.n === '' ||\n                  (this.state.n !== '' && !this.state.isNum) ||\n                  (this.state.solutions && this.state.solutions[0].length !== parseInt(this.state.n)) ||\n                  this.state.index < 0 ||\n                  (this.state.solutions && this.state.index + 1 >= this.state.solutions.length)\n                } onClick={this.next}\n              />\n            </form>\n          </div>\n          </div>\n\n\n        </div>\n    );\n\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}